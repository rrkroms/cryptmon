#!/bin/bash
age_key=$(cat $AGE_CFG_FILE 2>/dev/null)
sops_key=$(cat $SOPS_CFG_DIR/keys.txt 2>/dev/null)
view_cfg(){
#thos function help to view configuration
		--age(){
			[ ! -e $AGE_CFG_FILE ] && tell f "AGE : KEYGEN not exiest!" || tell d "AGE : ${yellow}DIR:- ${blue} $AGE_CFG_FILE
	   ${yellow}KEY:-${red} $AGE_PUB"
			}
		--gpg(){
			[ -z "$GPG_USR" ] && tell f "GPG : user not exiest!" || tell d "GPG : USER :- $GPG_USR"
		}
		--sops(){
			[ !-h $SOPS_CFG_DIR/keys.txt ] tell f "SOPS: Age key symbolic file not exiest" ||
			[]
		}
		[ -z $1 ]&& --age 
		[ -z $1 ]&& --gpg
		$@
	}

pkg_cfg(){
#this function check requied packages.
	pkg_status=$(grep -oP 'pkg_status: \K(.*)' $CFG_DIR/.config 2>/dev/null)

	pkg_check(){
	pkg_msg0="is installed on this system."
	pkg_msg1="is not installed on this system."

	if command -v gpg &>/dev/null ; then
	[[ $1 == *'v' ]] && tell s "GPG (GNU Privacy Guard) ${pkg_msg0}"
	else
	tell f "GPG (GNU Privacy Guard) ${pkg_msg1}"
	missing_pkg+="gnupg"
	fi

	if 
	command -v age &>/dev/null ; then
	[[ $1 == *'v' ]] && tell s "AGE ${pkg_msg0}"
	else
	tell f "AGE ${pkg_msg0}"
	missing_pkg+=" age"
	fi
	
	if
	command -v sops &>/dev/null ; then
        [[ $1 == *'v' ]] &&  tell s "SOPS ${pkg_msg0}"
	else
        tell f "SOPS ${pkg_msg0}"
	missing_pkg+=" sops"
	fi

	if
	command -v openssl &>/dev/null ; then
        [[ $1 == *'v' ]] && tell s "OPNESSL ${pkg_msg0}"
	else
        tell f "OPNESSL ${pkg_msg0}"
	missing_pkg+=" openssl-tool"
	fi
	[[ -z $missing_pkg && -z $pkg_status ]] && echo "pkg_status: clear" >> $CFG_DIR/.config
	[[ ! -z $missing_pkg ]] && ask i "Y" "Do you want to install $missing_pkg ?" install_pkg &&
	apt install -y $missing_pkg &&
	[ -z $pkg_status ] && echo "pkg_status: clear" >> $CFG_DIR/.config
	
}
	pkg_act(){
	#this function triger pkg_cfg function
       		[[ ! -e $CFG_DIR/.config || $pkg_status != "clear" || $2 == "--force" ]] && pkg_check $1 
}
$@
}
sops_cfg() {
	[[ ! -e $SOPS_CFG_DIR ]] && mkdir -p $SOPS_CFG_DIR && tell i "SOPS: CREATing $SOPS_CFG_DIR"
	[[ -h $SOPS_CFG_DIR/keys.txt && $age_key == $sops_key ]] && tell s "SOPS: Age key symbolic file exiest" && return 0

	[ ! -h $SOPS_CFG_DIR/keys.txt ] && tell i "SOPS: CREATing Age key's symbolic file" &&
	ln -vs $AGE_CFG_FILE $SOPS_CFG_DIR/keys.txt ||
	tell f "SOPS:Age key symbolic file CREATion failed!!!"
	unset $age_key 
	unset $symbolic_file
}

age_cfg() {

	verify() {
	#this function verify age key
		check(){
			# e : check that input file exiest
			# m : match input file with contained filed(in this case, we are use keygen file[$AGE_CFG_FILE])
			# f : ask to user for overwrite on exiest contained file
			# USAGE: -emf or --m or -f or -e or -ef 
			[[ $1 == "-"*"e"* ]] &&
			[[ -n $2 && ! -e $2 ]] && tell f "AGE : input file [$2] dosn't exiest!" && exit 
			
			[[ $1 == "-"*"m"* ]] &&
			[[  -e $2 && $(cat "$2") == $(cat "$AGE_CFG_FILE") ]] 2> /dev/null && tell s "AGE : FILE[$2] match with AGE keygen" && exit
			[[ $1 == "-"*"f" ]]&&
			[ -e $AGE_CFG_FILE ] &&
    		ask i N "You have alredy config file, so You want replace it!!" r  && exit
		}

		vaildtion(){
		tell i "AGE: KEYGEN Verfiying..."
		[ ! -e $2 ]&& tell f "file dosn't exiest"&& exit|| keygen=$2
		pub=$(grep -oP "public key: \K(.*)" $keygen 2>/dev/null)
		prv=$(grep -oP "AGE-SECRET-KEY-\K(.*)" $keygen 2>/dev/null)
		echo $pub
		echo $prv
		tell s "AGE : Valid KeyGen " ||
		tell f "AGE : Invalid  KeyGen"
		}
		$@
	}
	exmport(){
	#export/backup age key
		BACKUP=AGE_KEYGEN_FILE.rom
		ex_dir=$1
		tell i "AGE : exmportin keygen.."&&
		[ -z $ex_dir ]&& input d "INTER EXPORT DIR :" ex_dir
		[[ ! -e $ex_dir ]]&& tell f "$ex_dir dosn't exiest"&& exit
		tell i "exporting AGE keygen..."&&
		tell d "DIR : $ex_dir/$BACKUP"&&
		cp $AGE_CFG_FILE $ex_dir./$BACKUP&&
		tell s "AGE : keygen exmported"||
		tell f "AGE : keygen exmportion FAIL"
	}
	import() {
	#import/restore age key
		[ $1 == "-ds" ]&& con="-emf" || con="-em"
		[[ $1 == "-s" ]] || # that argument('-s : skip') condition skip the verification of input file 
		verify check $con $2 #||
		tell i "AGE : importing keygen file..."
		
		agekeygen=$2
		[ -z $agekeygen ]&&
		input d " inter AGE KEY FILE : " agekeygen &&
		verify check -em $agekeygen
		[[ -e $agekeygen && -s $agekeygen ]] &&
		cp -v "$agekeygen" "$AGE_CFG_FILE" &&
		tell s "AGE : KEYGEN impoted" ||
		tell f "AGE : file importion fail"&&
		exit
	}

	create() {
	#genaretion age key
		    [ -e $AGE_CFG_FILE ]&& tell f "DANGER ZONE : You have alredy AGE KEYGEN, that resone we are not generate KEYGEN " && exit
		    tell i "AGE: KEYGEN creating..." &&
			age-keygen -o key && mv key "$AGE_CFG_FILE" &&
			tell i "keygen dirctory : $AGE_CFG_FILE " &&
			tell s "AGE : KEYGEN genaretion Done..." ||
			tell f "AGE : KEYGEN CREATION FAIL" &&
			rm -rf key
			call_sops_cfg
	}

auto(){
#this function React as Situation,that mean check age key's Existence in 'configer directory' & user input($0 -cai key.txt) then run  run correct function According the Situation
		verify check -emf $1 ||
		[[ -n $1 ]]&& import -s $1 && exit # ('-s : skip') argument condition skip the verification of input file
		ask 'w' 'Y' 'you have AGE keygen BACKUP FILE?' &&
		import --m $1 || create


}
call_sops_cfg(){
#this function triger sops configuraction's function.
	ask i Y "you want link age key with sops?" && sops_cfg
}
# argument reciver
$@
}

gpg_cfg() {
		list_key=$(gpg --list-secret-keys --with-colons | grep "^uid" | cut -d: -f10) 2> /dev/null
		GPG_PROFILE_USR=$(echo "$list_key" | awk '{print $1}') 2> /dev/null

		msg1="user alredy exiest"
		[ -n "$1" ] && usr="$1"
        	[[ -z $usr && -n $GPG_PROFILE_USR ]] &&
		tell i "We are found user[${red}$GPG_PROFILE_USR${blue}] in your cryptmon GPG profile" && 
		ask i Y "You Want to use GPG profile USER NAME" &&
		usr=$GPG_PROFILE_USR

		[[ -n "$GPG_USR" && "$GPG_USR" == "$usr" ]] && tell i "[$red$usr$blue] $msg1" && return 0 ||
		[[ -n "$GPG_USR" ]]&& ask w N "you have alredy user[$GPG_USR], you want to replace with $usr" r && exit ||
		[ -z "$usr" ]&&
		input d  "set GPG user name : " "usr" &&
		[[ "$GPG_USR" == "$usr" ]] && tell i "[$red$usr$blue] $msg1" && exit ||
		[[ ! -z $GPG_USR ]] && sed -i "s/^gpg_user:.*/gpg_user: $usr/" "$CFG_DIR/.config" ||
		echo "gpg_user: $usr" >> $CFG_DIR/.config &&
	    	tell s "add user $usr Done..."
}

reset_cfg(){
#this function reset/remove configuration.
	mgs_ex="configuration not exiest!"
	msg_don="configuration reset, successful."
	mgs_as="you want to reset configuration?"
	age_rm () {
		[[ ! -e $AGE_CFG_FILE ]] && tell f "AGE : $mgs_ex" && return 1
 		ask i N "AGE : $mgs_as" r && exit 
		ask w N "You have AGE keygen backup?" r && tell i "AGE : First backup your age keygen then, Do this!" && exit
		rm -vrf  $AGE_CFG_FILE &&
		tell s "AGE : $msg_don"
	}

	gpg_rm () {
		[ -z "$GPG_USR" ] && tell f "GPG: $mgs_ex" && return 1
		ask i N "GPG : $mgs_as" r && exit ||
		[[ ! -z $GPG_USR ]] && sed -i "/^gpg_user:*/d" "$CFG_DIR/.config" &&
		# sed -i "s/^gpg_user:.*/gpg_user: /" that code just remove user name ($usr), not complete line(gpg_user: $usr)
		tell s "GPG : $msg_don"
	}
	sops_rm () {
		[[ "$1" == "--force-remove" ]] && rm -rvf $SOPS_CFG_DIR/keys.txt && tell s "SOPS: $msg_don" && exit
		[[ -e $SOPS_CFG_DIR/keys.txt && $age_key != $sops_key ]] && tell d "SOPS: key not match with age key. use --foce-remove 
     [SOPS KEY DIR ${yellow}:$SOPS_CFG_DIR/keys.txt${blue}] "
		[ ! -h $SOPS_CFG_DIR/keys.txt ] && tell f "SOPS: $mgs_ex" && return 1
		# ask i N "SOPS: $mgs_as" r && exit
		rm -rvf $SOPS_CFG_DIR/keys.txt &&
		tell s "SOPS: $msg_don"
	}
# argument reciver
	"$@"
}

# [ $1 == '-c'* ]&&
[ ! -d $CFG_DIR ] &&
        mkdir $CFG_DIR &&
        tell i "creating configer dirctory ${CFG_DIR}"

pkg_cfg pkg_act
